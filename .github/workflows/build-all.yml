# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build-All

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          musl-tools \
          clang p7zip \
          gcc-aarch64-linux-gnu
          
        # setup aarch64 musl cross toolachin
        git clone https://github.com/chase535/aarch64-linux-musl-gcc --depth=1
        echo "$GITHUB_WORKSPACE/aarch64-linux-musl-cross/bin" >> $GITHUB_PATH

        # setup mingw windows(ucrt) toolchains
        wget https://github.com/mstorsjo/llvm-mingw/releases/download/20250528/llvm-mingw-20250528-ucrt-ubuntu-22.04-x86_64.tar.xz
        mkdir -p llvm-mingw
        tar -xvf llvm-mingw-20250528-ucrt-ubuntu-22.04-x86_64.tar.xz --strip-components=1 -C llvm-mingw
        echo "$GITHUB_WORKSPACE/llvm-mingw/bin" >> $GITHUB_PATH

    - name: Cache toolchains
      uses: actions/cache@v4
      with:
        path: |
          "aarch64-linux-musl-cross"
          "llvm-mingw"
        key: ${{ runner.os }}-${{ hashFiles('aarch64-linux-musl-cross.tgz') }}-${{ hashFiles('llvm-mingw-20250528-ucrt-ubuntu-22.04-x86_64.tar.xz') }}
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Setup Ndk toolchains
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e
        add-to-path: false

    - name: Setup OSX toolchains
      uses: Timmmm/setup-osxcross@v3
      # This builds executables & sets env variables for rust to consume.
      with:
        osx-version: "12.3"
      
    - name: Setup vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git --depth=1
        ./vcpkg/bootstrap-vcpkg.sh
        echo "$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_PATH

    - name: Build linux(x86_64) binaries
      env:
        CC: musl-gcc
        GOOS: linux
        GOARCH: amd64
        VCPKG_TARGET_TRIPLET: x64-linux
      run: |
        vcpkg install --triplet=$VCPKG_TARGET_TRIPLET liblzma
        go get -u
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE="Release" -DVCPKG_HOME="$VCPKG_HOME" \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET="x64-linux" \
          -DVCPKG_HOME="$GITHUB_WORKSPACE/vcpkg" \
          -DSTATIC=ON && cmake --build build --verbose
        OUTDIR="out/x86_64-linux-$(git rev-parse --short HEAD)"
        mkdir -p $OUTDIR
        cp -af build/payload_extract_go $OUTDIR/
        rm -rf build

    
      
    - name: Upload linux artifacts
      uses: actions/upload-artifact@v4
      id: linux-binaries
      with:
        name: linux-binaries
        path: out/x86_64-linux-*/

    - name: Build windows(x86_64) binaries
      env:
        CC: x86_64-w64-mingw32-clang
        GOOS: windows
        GOARCH: amd64
        VCPKG_TARGET_TRIPLET: x64-mingw-static
      run: |
        vcpkg install --triplet=$VCPKG_TARGET_TRIPLET liblzma
        go get -u
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE="Release" -DVCPKG_HOME="$VCPKG_HOME" \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET="x64-linux" \
          -DVCPKG_HOME="$GITHUB_WORKSPACE/vcpkg" \
          -DSTATIC=ON && cmake --build build --verbose
        OUTDIR="out/x86_64-windows-$(git rev-parse --short HEAD)"
        mkdir -p $OUTDIR
        cp -af build/payload_extract_go $OUTDIR/
        rm -rf build

    - name: Build windows(x86_64) binaries
      env:
        CC: x86_64-w64-mingw32-clang
        GOOS: windows
        GOARCH: amd64
        VCPKG_TARGET_TRIPLET: x64-mingw-static
      run: |
        vcpkg install --triplet=$VCPKG_TARGET_TRIPLET liblzma
        go get -u
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE="Release" -DVCPKG_HOME="$VCPKG_HOME" \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET="x64-linux" \
          -DVCPKG_HOME="$GITHUB_WORKSPACE/vcpkg" \
          -DSTATIC=ON && cmake --build build --verbose
        OUTDIR="out/x86_64-windows-$(git rev-parse --short HEAD)"
        mkdir -p $OUTDIR
        cp -af build/payload_extract_go $OUTDIR/
        rm -rf build

    - name: Build windows(x86) binaries
      env:
        CC: i686-w64-mingw32-clang
        GOOS: windows
        GOARCH: 386
        VCPKG_TARGET_TRIPLET: x86-mingw-static
      run: |
        vcpkg install --triplet=$VCPKG_TARGET_TRIPLET liblzma
        go get -u
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE="Release" -DVCPKG_HOME="$VCPKG_HOME" \
          -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET="x64-linux" \
          -DVCPKG_HOME="$GITHUB_WORKSPACE/vcpkg" \
          -DSTATIC=ON && cmake --build build --verbose
        OUTDIR="out/x86-windows-$(git rev-parse --short HEAD)"
        mkdir -p $OUTDIR
        cp -af build/payload_extract_go $OUTDIR/
        rm -rf build

    - name: Upload windows artifacts
      uses: actions/upload-artifact@v4
      id: windows-binaries
      with:
        name: windows-binaries
        path: out/x86_64-windows-*/
